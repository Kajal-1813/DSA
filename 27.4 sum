class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
         vector<vector<int>>final;
        if (nums.empty())
            return final;
        int n = nums.size(); 
        sort(nums.begin(),nums.end());
       
       for(int i=0;i<nums.size();i++)
       {
           for(int j=i+1;j<nums.size();j++)
           {
               int front=j+1;
               int back=nums.size()-1;
               int rem=target-(nums[i]+nums[j]);
              
               while(front<back)
               {
                   if(nums[front]+nums[back]<rem)front++;
                   else if(nums[front]+nums[back]>rem)back--;
                   else
                   {
                       vector<int>quadruplet(4,0);
                      quadruplet[0] = nums[i];
                        quadruplet[1] = nums[j];
                        quadruplet[2] = nums[front];
                        quadruplet[3] = nums[back];
                       final.push_back(quadruplet);
                       
                       
                       
                       while (front < back && nums[front] == quadruplet[2]) ++front;
                    
                        // Processing the duplicates of number 4
                        while (front < back && nums[back] == quadruplet[3]) --back;
                   }
               }
                 
                // Processing the duplicates of number 2
                while(j + 1 < n && nums[j + 1] == nums[j]) ++j;
            }
        
            // Processing the duplicates of number 1
            while (i + 1 < n && nums[i + 1] == nums[i]) ++i;
        
           }      
       
        return final;
    }
};
